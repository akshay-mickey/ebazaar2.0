package com.ebazaar.product;

import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Positive;
import jakarta.validation.constraints.Size;

@Entity
public class Product {

	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private Long productId;

	@NotBlank(message = "Name is mandatory")
	@Size(max = 100, message = "Name can be upto 100 charecters")
	private String productName;

	@NotBlank(message = "Description is mandatory")
	@Size(max = 1000, message = "Description can be upto 1000 charecters")
	private String productDescription;

	@NotNull(message = "Price is mandatory")
	@Positive(message = "price must be positive")
	private Long productPrice;

	@NotNull(message = "Quantity is mandatory")
	@Positive(message = "Quantity must be positive")
	private Long productQuantity;

	@NotBlank(message = "Category is mandatory")
	@Size(max = 100, message = "Category upto 100 charecters only")
	private String category;

	@NotBlank(message = "Brand is mandatory")
	@Size(max = 100, message = "Brand upto 100 charecters only")
	private String productBrand;

	@NotBlank(message = "Image URL is mandatory")
	private String productImage;

	@NotBlank(message = "Specification is mandatory")
	private String productSpecification;

	public Product(Long productId,
			@NotBlank(message = "Name is mandatory") @Size(max = 100, message = "Name can be upto 100 charecters") String productName,
			@NotBlank(message = "Description is mandatory") @Size(max = 1000, message = "Description can be upto 1000 charecters") String productDescription,
			@NotBlank(message = "Price is mandatory") @Positive(message = "price must be positive") Long productPrice,
			@NotBlank(message = "Quantity is mandatory") @Positive(message = "Quantity must be positive") Long productQuantity,
			@NotBlank(message = "Category is mandatory") @Size(max = 100, message = "Category upto 100 charecters only") String category,
			@NotBlank(message = "Brand is mandatory") @Size(max = 100, message = "Brand upto 100 charecters only") String productBrand,
			@NotBlank(message = "Image URL is mandatory") String productImage,
			@NotBlank(message = "Specification is mandatory") String productSpecification) {
		super();
		this.productId = productId;
		this.productName = productName;
		this.productDescription = productDescription;
		this.productPrice = productPrice;
		this.productQuantity = productQuantity;
		this.category = category;
		this.productBrand = productBrand;
		this.productImage = productImage;
		this.productSpecification = productSpecification;
	}

	@Override
	public String toString() {
		return "Product [productId=" + productId + ", productName=" + productName + ", productDescription="
				+ productDescription + ", productPrice=" + productPrice + ", productQuantity=" + productQuantity
				+ ", category=" + category + ", productBrand=" + productBrand + ", productImage=" + productImage
				+ ", productSpecification=" + productSpecification + "]";
	}

	public Long getProductId() {
		return productId;
	}

	public void setProductId(Long productId) {
		this.productId = productId;
	}

	public String getProductName() {
		return productName;
	}

	public void setProductName(String productName) {
		this.productName = productName;
	}

	public String getProductDescription() {
		return productDescription;
	}

	public void setProductDescription(String productDescription) {
		this.productDescription = productDescription;
	}

	public Long getProductPrice() {
		return productPrice;
	}

	public void setProductPrice(Long productPrice) {
		this.productPrice = productPrice;
	}

	public Long getProductQuantity() {
		return productQuantity;
	}

	public void setProductQuantity(Long productQuantity) {
		this.productQuantity = productQuantity;
	}

	public String getCategory() {
		return category;
	}

	public void setCategory(String category) {
		this.category = category;
	}

	public String getProductBrand() {
		return productBrand;
	}

	public void setProductBrand(String productBrand) {
		this.productBrand = productBrand;
	}

	public String getProductImage() {
		return productImage;
	}

	public void setProductImage(String productImage) {
		this.productImage = productImage;
	}

	public String getProductSpecification() {
		return productSpecification;
	}

	public void setProductSpecification(String productSpecification) {
		this.productSpecification = productSpecification;
	}

	public Product() {

	}

}
package com.ebazaar.product;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

@RestController
@RequestMapping("/product/api/v1.0")
public class ProductController {

	@Autowired
	ProductService service;

	@PutMapping("/update")
	Product updateProductDetails(Product product) {

		return service.updateProductDetails(product);

	}

	@PostMapping("/addproduct")
	void addNewProduct(@RequestBody Product product) {

		service.addNewProduct(product);

	}

	@DeleteMapping("/delete/{id}")
	void deleteProduct(@PathVariable Long id) {

		service.deleteProduct(id);

	}

	@GetMapping("/productcount/{productName}")
	void lessProductQuantity(@PathVariable String productName) {

		service.lessProductQuantity(productName);

	}

	@GetMapping("/category/{category}")
	List<Product> getProductByCategory(@PathVariable String category) {

		return service.getProductByCategory(category);
	}

	@GetMapping("/pricerange/{minprice}/{maxprice}")
	List<Product> getByProductPriceRange(Long minPrice, Long maxPrice) {

		return service.getByProductPriceRange(minPrice, maxPrice);
	}

	@GetMapping("/brand/{productBrand}")
	List<Product> getProductByProductBrand(String productBrand) {

		return service.getProductByProductBrand(productBrand);
	}

	@GetMapping("/sort")
	List<Product> getProductSortedByPrice() {

		return service.getProductSortedByPrice();
	}

	@GetMapping("/details/{productId}")
	public ResponseEntity<Product> getProductDetails(@PathVariable Long productId) {

		Product product = service.getProductById(productId);
		if (product == null) {
			return ResponseEntity.notFound().build();
		}
		return ResponseEntity.ok(product);
	}

	@PutMapping("/add/{id}/{quantity}")
	public void addQuantity(@PathVariable Long id, @PathVariable Long quantity) {
		
		service.addQuantity(id, quantity);
		
	}
	
	@GetMapping
	

    public ResponseEntity<List<Product>> getProducts(
            @RequestParam(value = "category", required = false) String category,
            @RequestParam(value = "name", required = false) String name,
            @RequestParam(value = "minPrice", required = false) Long minPrice,
            @RequestParam(value = "maxPrice", required = false) Long maxPrice,
            @RequestParam(value = "sort", required = false) String sort) {

        // Example service method call with optional parameters
        List<Product> products = service.findProducts(category, name, minPrice, maxPrice, sort);

        // Return the list of products wrapped in a ResponseEntity
        return ResponseEntity.ok(products);
    }


}
package com.ebazaar.product;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;
import org.springframework.web.bind.annotation.RequestParam;

@Service
public class ProductService {

	@Autowired
	private ProductRepository repo;

	List<Product> getProductByCategory(String category) {

		return repo.findByCategory(category);
	}

	Product getProductById(Long id) {

		return repo.findById(id).get();
	}

	Product addNewProduct(Product product) {

		return repo.save(product);

	}

	Product getProductByProductName(String name) {

		return repo.findByProductName(name);
	}

	Product getProductByProductPrice(Long productPrice) {

		return repo.findByProductPrice(productPrice);
	}

	List<Product> getProductByProductBrand(String productBrand) {

		return repo.findByProductBrand(productBrand);
	}

	Product updateProductDetails(Product product) {

		return repo.save(product);

	}

	void deleteProduct(Long id) {

		repo.deleteById(id);

	}

	void lessProductQuantity(String productName) {

		Product product = repo.findByProductName(productName);

		if (product.getProductQuantity() < 0)

			System.out.println("This product is out of stock for now");

		else

			System.out.println("Product is available");

	}

	public List<Product> getByProductPriceRange(Long minPrice, Long maxPrice) {

		return repo.findByProductPriceBetween(minPrice, maxPrice);
	}

	public List<Product> getProductSortedByPrice() {

		Sort sort = Sort.by(Sort.Order.asc("productPrice"));

		return repo.findAll(sort);
	}

	public String getProductDetails(Long productId) {
		Product product = repo.findById(productId).orElse(null);
		if (product != null) {
			return product.getProductName() + " - " + product.getProductQuantity();

		}
		return "Product not found";
	}

	public void addQuantity(Long productId, Long quantityToAdd) {
		Optional<Product> optionalProduct = repo.findById(productId);
		if (optionalProduct.isPresent()) {
			Product product = optionalProduct.get();
			product.setProductQuantity(product.getProductQuantity() + quantityToAdd);
			repo.save(product);
		} else {
			throw new RuntimeException("Product not found");
		}
	}

	 public List<Product> findProducts(String category, String name, Long minPrice, Long maxPrice, String sort) {
	        
	        return repo.findProducts(category, name, minPrice, maxPrice, sort);
	    }

}
package com.ebazaar.product;

import java.util.List;

import org.springframework.data.domain.Sort;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

@Repository
public interface ProductRepository extends JpaRepository<Product, Long>{

	List<Product> findByCategory(String category);

	Product findByProductName(String name);

	Product findByProductPrice(Long productPrice);
	
	List<Product> findByProductBrand(String productBrand);
	
	 List<Product> findAll(Sort sort);

	List<Product> findByProductPriceBetween(Long minPrice, Long maxPrice);
	
	@Query("SELECT p FROM Product p WHERE " +
	           "(p.category = :category OR :category IS NULL) AND " +
	           "(p.productName LIKE %:productName% OR :productName IS NULL) AND " +
	           "(p.productPrice BETWEEN :minPrice AND :maxPrice OR :minPrice IS NULL OR :maxPrice IS NULL) " +
	           "ORDER BY CASE WHEN :sort = 'productPrice' THEN p.productPrice ELSE NULL END ASC, " +
	           "CASE WHEN :sort = 'name' THEN p.productName ELSE NULL END ASC")
	    List<Product> findProducts(
	        @Param("category") String category,
	        @Param("productName") String productName,
	        @Param("minPrice") Long minPrice,
	        @Param("maxPrice") Long maxPrice,
	        @Param("sort") String sort);
	
}



<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Product Form</title>
    <link rel="stylesheet" href="productFromStyle.css">
</head>
<body>
    <header class="navbar">
        <div class="container">
            <nav>
                <ul>
                    <li><a href="productHomePage.html">Home</a></li>
                    <li><a href="product-form.html">Add Product</a></li>
                    <li><a href="updateProduct.html">Update Product</a></li>
                    <li><a href="deleteProduct.html">Delete Product</a></li>
                </ul>
            </nav>
        </div>
    </header>

    <form id="productForm">
        <!-- Product ID field is not needed for user input -->
        <!-- <div>
            <label for="productId">Product ID</label>
            <input type="text" id="productId" name="productId" required>
        </div> -->

        <div>
            <label for="productName">Product Name</label>
            <input type="text" id="productName" name="productName" required>
        </div>

        <div>
            <label for="productDescription">Product Description</label>
            <textarea id="productDescription" name="productDescription" rows="4" required></textarea>
        </div>

        <div>
            <label for="productPrice">Product Price</label>
            <input type="number" id="productPrice" name="productPrice" step="0.01" required>
        </div>

        <div>
            <label for="productQuantity">Product Quantity</label>
            <input type="number" id="productQuantity" name="productQuantity" required>
        </div>

        <div>
            <label for="category">Category</label>
            <select id="category" name="category" required>
                <option value="">Select a category</option>
                <option value="electronics">Electronics</option>
                <option value="clothing">Clothing</option>
                <option value="home">Home</option>
            </select>
        </div>

        <div>
            <label for="productBrand">Product Brand</label>
            <input type="text" id="productBrand" name="productBrand" required>
        </div>

        <div>
            <label for="productImage">Product Image URL</label>
            <input type="url" id="productImage" name="productImage" required>
        </div>

        <div>
            <label for="productSpecification">Product Specification</label>
            <textarea id="productSpecification" name="productSpecification" rows="4" required></textarea>
        </div>

        <div>
            <button type="submit">Submit Product</button>
        </div>
    </form>

    <div id="responseMessage"></div>
    <div id="productIdDisplay"></div>

    <script>
        document.getElementById('productForm').addEventListener('submit', async function(event) {
            event.preventDefault();
            
            // Extract form values
            const productName = document.getElementById('productName').value;
            const productDescription = document.getElementById('productDescription').value;
            const productPrice = document.getElementById('productPrice').value;
            const productQuantity = document.getElementById('productQuantity').value;
            const category = document.getElementById('category').value;
            const productBrand = document.getElementById('productBrand').value;
            const productImage = document.getElementById('productImage').value;
            const productSpecification = document.getElementById('productSpecification').value;
    
            const urlEncodedData = {
                productName,
                productDescription,
                productPrice,
                productQuantity,
                category,
                productBrand,
                productImage,
                productSpecification
            };
            
            // Send data using fetch
            try {
                const response = await fetch('http://localhost:8088/product/api/v1.0/addproduct', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(urlEncodedData)
                });
                

            } catch (error) {

                const responseMessage = document.getElementById('responseMessage');
                responseMessage.innerHTML = '<p style="color: red;">There was an error submitting the form.</p>';
            }
        });
    </script>
    
</body>
</html><!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Update Product</title>
    <link rel="stylesheet" href="updateProductStyle.css">
</head>
<body>

    <header class="navbar">
        <div class="container">
            <h1>Update Product</h1>
            <nav>
                <ul>
                    <li><a href="productHomePage.html">Home</a></li>
                    <li><a href="product-form.html">Add Product</a></li>
                    <li><a href="updateProduct.html">Update Product</a></li>
                    <li><a href="deleteProduct.html">Delete Product</a></li>
                </ul>
            </nav>
        </div>
    </header>

    <main class="container">
        <h2>Update Product Details</h2>
        <form id="updateProductForm">
            <div>
                <label for="productId">Product ID</label>
                <input type="text" id="productId" name="productId" required>
            </div>

            <div>
                <label for="productName">Product Name</label>
                <input type="text" id="productName" name="productName" required>
            </div>

            <div>
                <label for="productDescription">Product Description</label>
                <textarea id="productDescription" name="productDescription" rows="4" required></textarea>
            </div>

            <div>
                <label for="productPrice">Product Price</label>
                <input type="number" id="productPrice" name="productPrice" step="0.01" required>
            </div>

            <div>
                <label for="productQuantity">Product Quantity</label>
                <input type="number" id="productQuantity" name="productQuantity" required>
            </div>

            <div>
                <label for="category">Category</label>
                <select id="category" name="category" required>
                    <option value="">Select a category</option>
                    <option value="electronics">Electronics</option>
                    <option value="clothing">Clothing</option>
                    <option value="home">Home</option>
                </select>
            </div>

            <div>
                <label for="productBrand">Product Brand</label>
                <input type="text" id="productBrand" name="productBrand" required>
            </div>

            <div>
                <label for="productImage">Product Image URL</label>
                <input type="url" id="productImage" name="productImage" required>
            </div>

            <div>
                <label for="productSpecification">Product Specification</label>
                <textarea id="productSpecification" name="productSpecification" rows="4" required></textarea>
            </div>

            <div>
                <button type="submit">Update Product</button>
            </div>
        </form>

        <div id="responseMessage"></div>
    </main>

    <script>
        // Function to fetch product details and populate the form
        async function fetchProductDetails(productId) {
            try {
                const response = await fetch(`http://localhost:8088/product/api/v1.0/product/${productId}`);
                const data = await response.json();

                if (response.ok) {
                    document.getElementById('productId').value = data.productId;
                    document.getElementById('productName').value = data.productName;
                    document.getElementById('productDescription').value = data.productDescription;
                    document.getElementById('productPrice').value = data.productPrice;
                    document.getElementById('productQuantity').value = data.productQuantity;
                    document.getElementById('category').value = data.category;
                    document.getElementById('productBrand').value = data.productBrand;
                    document.getElementById('productImage').value = data.productImage;
                    document.getElementById('productSpecification').value = data.productSpecification;
                } else {
                    document.getElementById('responseMessage').innerHTML = '<p style="color: red;">Product not found.</p>';
                }
            } catch (error) {
                document.getElementById('responseMessage').innerHTML = '<p style="color: red;">An error occurred: ' + error.message + '</p>';
            }
        }

        document.getElementById('updateProductForm').addEventListener('submit', async function(event) {
            event.preventDefault();

            // Extract form values
            const productId = document.getElementById('productId').value;
            const productName = document.getElementById('productName').value;
            const productDescription = document.getElementById('productDescription').value;
            const productPrice = document.getElementById('productPrice').value;
            const productQuantity = document.getElementById('productQuantity').value;
            const category = document.getElementById('category').value;
            const productBrand = document.getElementById('productBrand').value;
            const productImage = document.getElementById('productImage').value;
            const productSpecification = document.getElementById('productSpecification').value;

            const updatedProduct = {
                productId,
                productName,
                productDescription,
                productPrice,
                productQuantity,
                category,
                productBrand,
                productImage,
                productSpecification
            };

            try {
                const response = await fetch(`http://localhost:8088/product/api/v1.0/update`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(updatedProduct)
                });

                if (response.ok) {
                    document.getElementById('responseMessage').innerHTML = '<p style="color: green;">Product updated successfully!</p>';
                } else {
                    const data = await response.json();
                    document.getElementById('responseMessage').innerHTML = '<p style="color: red;">Error: ' + data.message + '</p>';
                }
            } catch (error) {
                document.getElementById('responseMessage').innerHTML = '<p style="color: red;">An error occurred: ' + error.message + '</p>';
            }
        });

        
    </script>

</body>
</html>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Delete Product</title>
    <link rel="stylesheet" href="deleteProductStyle.css">
</head>
<body>
    <header class="navbar">
        <div class="container">
            <h1>Website</h1>
            <nav>
                <ul>
                    <li><a href="productHomePage.html">Home</a></li>
                    <li><a href="product-form.html">Add Product</a></li>
                    <li><a href="updateProduct.html">Update Product</a></li>
                    <li><a href="deleteProduct.html">Delete Product</a></li>
                </ul>
            </nav>
        </div>
    </header>

    <main class="container">
        <h2>Delete Product</h2>
        <form id="deleteProductForm">
            <div>
                <label for="productId">Product ID</label>
                <input type="text" id="productId" name="productId" required>
            </div>

            <div>
                <button type="submit">Delete Product</button>
            </div>
        </form>

        <div id="responseMessage"></div>
    </main>

    <script>
        document.getElementById('deleteProductForm').addEventListener('submit', async function(event) {
            event.preventDefault();
            
            const productId = document.getElementById('productId').value.trim();
            const responseMessage = document.getElementById('responseMessage');

            if (!productId) {
                responseMessage.innerHTML = '<p style="color: red;">Please enter a product ID.</p>';
                return;
            }

            try {
                const response = await fetch(`http://localhost:8088/product/api/v1.0/delete/${productId}`, {
                    method: 'DELETE',
                });

                if (response.ok) {
                    responseMessage.innerHTML = '<p style="color: green;">Product successfully deleted.</p>';
                } else {
                    const data = await response.json();
                    responseMessage.innerHTML = `<p style="color: red;">Error: ${data.message}</p>`;
                }
            } catch (error) {
                console.error('Error:', error);
                responseMessage.innerHTML = '<p style="color: red;">An error occurred. Please try again.</p>';
            }
        });
    </script>
</body>
</html>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Update Product</title>
    <link rel="stylesheet" href="updateProductStyle.css">
</head>
<body>

    <header class="navbar">
        <div class="container">
            <h1>Update Product</h1>
            <nav>
                <ul>
                    <li><a href="productHomePage.html">Home</a></li>
                    <li><a href="product-form.html">Add Product</a></li>
                    <li><a href="updateProduct.html">Update Product</a></li>
                    <li><a href="deleteProduct.html">Delete Product</a></li>
                </ul>
            </nav>
        </div>
    </header>

    <main class="container">
        <h2>Update Product Details</h2>
        <form id="updateProductForm">
            <div>
                <label for="productId">Product ID</label>
                <input type="text" id="productId" name="productId" required>
            </div>

            <div>
                <label for="productName">Product Name</label>
                <input type="text" id="productName" name="productName" required>
            </div>

            <div>
                <label for="productDescription">Product Description</label>
                <textarea id="productDescription" name="productDescription" rows="4" required></textarea>
            </div>

            <div>
                <label for="productPrice">Product Price</label>
                <input type="number" id="productPrice" name="productPrice" step="0.01" required>
            </div>

            <div>
                <label for="productQuantity">Product Quantity</label>
                <input type="number" id="productQuantity" name="productQuantity" required>
            </div>

            <div>
                <label for="category">Category</label>
                <select id="category" name="category" required>
                    <option value="">Select a category</option>
                    <option value="electronics">Electronics</option>
                    <option value="clothing">Clothing</option>
                    <option value="home">Home</option>
                </select>
            </div>

            <div>
                <label for="productBrand">Product Brand</label>
                <input type="text" id="productBrand" name="productBrand" required>
            </div>

            <div>
                <label for="productImage">Product Image URL</label>
                <input type="url" id="productImage" name="productImage" required>
            </div>

            <div>
                <label for="productSpecification">Product Specification</label>
                <textarea id="productSpecification" name="productSpecification" rows="4" required></textarea>
            </div>

            <div>
                <button type="submit">Update Product</button>
            </div>
        </form>

        <div id="responseMessage"></div>
    </main>

    <script>
        // Function to fetch product details and populate the form
        async function fetchProductDetails(productId) {
            try {
                const response = await fetch(`http://localhost:8088/product/api/v1.0/product/${productId}`);
                const data = await response.json();

                if (response.ok) {
                    document.getElementById('productId').value = data.productId;
                    document.getElementById('productName').value = data.productName;
                    document.getElementById('productDescription').value = data.productDescription;
                    document.getElementById('productPrice').value = data.productPrice;
                    document.getElementById('productQuantity').value = data.productQuantity;
                    document.getElementById('category').value = data.category;
                    document.getElementById('productBrand').value = data.productBrand;
                    document.getElementById('productImage').value = data.productImage;
                    document.getElementById('productSpecification').value = data.productSpecification;
                } else {
                    document.getElementById('responseMessage').innerHTML = '<p style="color: red;">Product not found.</p>';
                }
            } catch (error) {
                document.getElementById('responseMessage').innerHTML = '<p style="color: red;">An error occurred: ' + error.message + '</p>';
            }
        }

        document.getElementById('updateProductForm').addEventListener('submit', async function(event) {
            event.preventDefault();

            // Extract form values
            const productId = document.getElementById('productId').value;
            const productName = document.getElementById('productName').value;
            const productDescription = document.getElementById('productDescription').value;
            const productPrice = document.getElementById('productPrice').value;
            const productQuantity = document.getElementById('productQuantity').value;
            const category = document.getElementById('category').value;
            const productBrand = document.getElementById('productBrand').value;
            const productImage = document.getElementById('productImage').value;
            const productSpecification = document.getElementById('productSpecification').value;

            const updatedProduct = {
                productId,
                productName,
                productDescription,
                productPrice,
                productQuantity,
                category,
                productBrand,
                productImage,
                productSpecification
            };

            try {
                const response = await fetch(`http://localhost:8088/product/api/v1.0/update`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(updatedProduct)
                });

                if (response.ok) {
                    document.getElementById('responseMessage').innerHTML = '<p style="color: green;">Product updated successfully!</p>';
                } else {
                    const data = await response.json();
                    document.getElementById('responseMessage').innerHTML = '<p style="color: red;">Error: ' + data.message + '</p>';
                }
            } catch (error) {
                document.getElementById('responseMessage').innerHTML = '<p style="color: red;">An error occurred: ' + error.message + '</p>';
            }
        });

        
    </script>

</body>
</html>
body {
    font-family: Arial, sans-serif;
    background-color: #f4f4f4;
    margin: 0;
    padding: 0;
}

header.navbar {
    background-color: #333;
    color: #fff;
    padding: 15px 0;
}

header .container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 20px;
    display: flex;
    justify-content: space-between;
    align-items: center;
}

header h1 {
    margin: 0;
    font-size: 24px;
}

nav ul {
    list-style: none;
    padding: 0;
    margin: 0;
    display: flex;
}

nav ul li {
    margin-left: 20px;
}

nav ul li a {
    color: #fff;
    text-decoration: none;
    font-size: 16px;
    transition: color 0.3s ease;
}

nav ul li a:hover {
    color: #ffcc00;
}

main.container {
    max-width: 1200px;
    margin: 20px auto;
    padding: 0 20px;
    text-align: center;
}

h2 {
    color: #333;
    margin-bottom: 20px;
}

form {
    background-color: #fff;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    width: 100%;
    max-width: 600px;
    box-sizing: border-box;
    margin: 0 auto;
}

div {
    margin-bottom: 15px;
}

label {
    display: block;
    margin-bottom: 8px;
    color: #555;
}

input[type="text"] {
    width: 100%;
    padding: 8px;
    border: 1px solid #ddd;
    border-radius: 4px;
    box-sizing: border-box;
}

button {
    width: 100%;
    padding: 10px;
    border: none;
    border-radius: 4px;
    background-color: #dc3545;
    color: #fff;
    font-size: 16px;
    cursor: pointer;
    transition: background-color 0.3s ease;
}

button:hover {
    background-color: #c82333;
}

#responseMessage {
    margin-top: 20px;
    text-align: center;
    font-size: 16px;
}